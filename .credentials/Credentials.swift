import Foundation
import CommonCrypto


struct AES256Key {

	static let length = Int(kCCKeySizeAES256)
	let key: [UInt8]

	init(string: String) {
		var buffer = [UInt8](repeating: 0, count: Self.length)
		if let data = string.data(using: .utf8) {
			let bytes = [UInt8](data)
			(0 ..< min(bytes.count, Self.length)).forEach { buffer[$0] = bytes[$0] }
		}
		assert(buffer.count == Self.length)
		self.key = buffer
	}

	init?(data: Data) {
		guard data.count == Self.length else { return nil }
		var buffer = [UInt8](repeating: 0, count: Self.length)
		(0 ..< Self.length).forEach { buffer[$0] = data[$0] }
		self.key = buffer
	}
}


extension Data {

	static private let keyLength = Int(kCCKeySizeAES256+1)

	func encryptAES256(key: AES256Key) -> Data? {
		let blockSize = Int(kCCBlockSizeAES128)
		var buffer = [UInt8](repeating: 0, count: self.count + blockSize)
		var numberOfBytesDecrypted: size_t = 0
		let status = CCCrypt(CCOperation(kCCEncrypt), CCAlgorithm(kCCAlgorithmAES128), CCOptions(kCCOptionPKCS7Padding),
				key.key, kCCKeySizeAES256,
				nil, // initialization vector (optional)
				(self as NSData).bytes, self.count, // input
				&buffer, buffer.count, // output
				&numberOfBytesDecrypted);
		if status == kCCSuccess {
			return Data(bytes: &buffer, count: Int(numberOfBytesDecrypted))
		}
		return nil
	}

	func decyptAES256(key: AES256Key) -> Data? {
		let blockSize = Int(kCCBlockSizeAES128)
		var buffer = [UInt8](repeating: 0, count: self.count + blockSize)
		var numberOfBytesDecrypted: size_t = 0
		let status = CCCrypt(CCOperation(kCCDecrypt), CCAlgorithm(kCCAlgorithmAES128), CCOptions(kCCOptionPKCS7Padding),
				key.key, kCCKeySizeAES256,
				nil, // initialization vector (optional)
				(self as NSData).bytes, self.count, // input
				&buffer, buffer.count, // output
				&numberOfBytesDecrypted);
		if status == kCCSuccess {
			return Data(bytes: &buffer, count: Int(numberOfBytesDecrypted))
		}
		return nil
	}

}

let aesKeyBin = Data([0x9d,0x93,0xcb,0x12,0x94,0x2c,0xfb,0x12,0xf5,0x9d,0x1f,0xd8,0xd6,0xa3,0x07,0x8a,0x23,0xba,0x99,0x74,0x4d,0xf0,0x60,0xdc,0x97,0xe3,0xd8,0xbf,0x86,0xde,0xcb,0xbd])
let aesKey = AES256Key(data: aesKeyBin)!
let encryptedBin = Data([0x79,0x95,0x68,0xb1,0x6e,0xad,0xbc,0x38,0xaf,0x6a,0xe3,0x6a,0x18,0x80,0xc4,0xac,0xc0,0x7b,0xf2,0x7f,0x15,0xf7,0xde,0x4b,0xc9,0xa2,0x1a,0x88,0x5e,0x2e,0xd1,0xda,0xc4,0x9a,0xe4,0x4f,0x0c,0x33,0x25,0x8e,0x42,0x37,0x41,0x6f,0xc8,0x1e,0xae,0xc4,0x49,0xa4,0xa8,0x7f,0x61,0xee,0xc6,0x19,0xdb,0x55,0x5a,0xcc,0xa8,0x7c,0x52,0x82,0xba,0x2e,0xc8,0xe8,0x35,0x2c,0x9d,0x4d,0xf0,0x50,0x75,0x6a,0x39,0x83,0xb3,0x30,0x61,0x87,0x36,0x01,0xd6,0x31,0x9f,0x5f,0x86,0x7e,0x0c,0x35,0x46,0xff,0x33,0x16,0x97,0xc2,0x42,0x0a,0xc5,0x2e,0x62,0x05,0x37,0xaa,0x17,0x8b,0x02,0xec,0x0d,0x20,0x89,0x71,0xe7,0x39,0x29,0x5c,0xad,0xcc,0x68,0xca,0x51,0x3a,0xcf,0x9d,0xc1,0x76,0x64,0x8c,0x36,0x58,0x51,0x60,0x43,0x4e,0x59,0x59,0x88,0xa9,0x00,0x1c,0x72,0xd9,0xf6,0x44,0xd3,0xf3,0xa0,0xd4,0xef,0xdb,0x2f,0x9f,0x20,0x9a,0xd1,0x73,0x8b,0x57,0xda,0xe0,0x0b,0x91,0xbe,0xda,0x91,0xc6,0x65,0x43,0x56,0xcd,0x1a,0x44,0xcc,0xac,0x19,0x81,0x3b,0x62,0x88,0x24,0x20,0x97,0xa7,0xff,0xcf,0xaf,0xf5,0x45,0x0c,0x67,0x44,0x15,0x03,0xe4,0x1b,0x23,0x71,0x16,0xe2,0x79,0x8d,0x83,0x16,0x4d,0xd7,0x46,0xe9,0x8b,0xf1,0x30,0x72,0xe6,0x15,0x09,0x04,0x32,0x1d,0xf0,0x83,0xb9,0xbe,0x35,0xb4,0x6c,0xc5,0xd4,0x9e,0x51,0x79,0xef,0x9f,0xe5,0x52,0xfa,0x10,0xc5,0xf1,0x00,0x96,0xdd,0x22,0xee,0x2c,0xb8,0xa5,0xc3,0xce,0x72,0x61,0xfb,0xfc,0xf5,0x0c,0x75,0x23,0xc3,0x2d,0xa7,0xc5,0xac,0x99,0x23,0x90,0x9b,0x33,0xc8,0x13,0xf1,0xe5,0x3c,0x52,0x31,0x83,0x2d,0xee,0xef,0xaa,0x0c,0xb9,0xdd,0x21,0x0d,0xb0,0xeb,0x20,0x79])
let decryptedBin = encryptedBin.decyptAES256(key: aesKey)!

class CC1B2D1CD7134FC4A0D08F2849A8D305 {
	static let shared = CC1B2D1CD7134FC4A0D08F2849A8D305()
	let dictionary: [String: Any]?
	private init() {
		dictionary = try? PropertyListSerialization.propertyList(from: decryptedBin, options: [], format: nil) as? [String: Any]
	}
	subscript(key: String) -> Any? {
		return dictionary?[key]
	}
}
typealias CREDENTIALS = CC1B2D1CD7134FC4A0D08F2849A8D305